<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddItemButton" xml:space="preserve">
    <value>Add item</value>
  </data>
  <data name="AddListButton" xml:space="preserve">
    <value>Add list</value>
  </data>
  <data name="ChangeListNameButton" xml:space="preserve">
    <value>Change name</value>
  </data>
  <data name="ChangeVisibilityButton" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ChooseLanguage" xml:space="preserve">
    <value>Choose language:</value>
  </data>
  <data name="DeleteListButton" xml:space="preserve">
    <value>Delete list</value>
  </data>
  <data name="LanguageChanged" xml:space="preserve">
    <value>Language changed to english.</value>
  </data>
  <data name="ListIsEmpty" xml:space="preserve">
    <value>{0}, list {1} is empty, add item using button below</value>
  </data>
  <data name="ListsMessage" xml:space="preserve">
    <value>{0}, your lists:</value>
  </data>
  <data name="MakePrivate" xml:space="preserve">
    <value>Make private</value>
  </data>
  <data name="MakePublic" xml:space="preserve">
    <value>Make public</value>
  </data>
  <data name="NoLists" xml:space="preserve">
    <value>{0}, you have no lists, press button below to create one</value>
  </data>
  <data name="SetListName" xml:space="preserve">
    <value>Type list name</value>
  </data>
  <data name="ChangeItemNameButton" xml:space="preserve">
    <value>Change name</value>
  </data>
  <data name="StartMessage" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="ViewListMessage" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="WatchList" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="SetDescriptionButton" xml:space="preserve">
    <value>Set description</value>
  </data>
  <data name="SetMediaButton" xml:space="preserve">
    <value>Set photo/video</value>
  </data>
  <data name="SetLinkButton" xml:space="preserve">
    <value>Set link</value>
  </data>
  <data name="DeleteItemButton" xml:space="preserve">
    <value>Delete item</value>
  </data>
  <data name="ChangeLanguageButton" xml:space="preserve">
    <value>🇬🇧 English</value>
  </data>
  <data name="LanguageAlreadySet" xml:space="preserve">
    <value>Language already set</value>
  </data>
  <data name="ListDeleted" xml:space="preserve">
    <value>List deleted</value>
  </data>
  <data name="TypeList" xml:space="preserve">
    <value>Type '/lists' to view your lists.</value>
  </data>
  <data name="ListNotFound" xml:space="preserve">
    <value>List not found.</value>
  </data>
  <data name="DefaultItemNaming" xml:space="preserve">
    <value>My wish</value>
  </data>
  <data name="SetItemName" xml:space="preserve">
    <value>Set item name</value>
  </data>
  <data name="DefaultListNaming" xml:space="preserve">
    <value>My WishList</value>
  </data>
  <data name="ListNameCantBeEmpty" xml:space="preserve">
    <value>List name can't be empty. Try again.</value>
  </data>
  <data name="ItemNameCantBeEmpty" xml:space="preserve">
    <value>Item name can't be empty. Try again.</value>
  </data>
  <data name="SetDescription" xml:space="preserve">
    <value>Type description</value>
  </data>
  <data name="DescriptionCantBeEmpty" xml:space="preserve">
    <value>Description can't be empty, try again</value>
  </data>
  <data name="DeleteDescriptionButton" xml:space="preserve">
    <value>Delete description</value>
  </data>
  <data name="SetOrDeleteDescription" xml:space="preserve">
    <value>Set new descrption or press the button to delete existing</value>
  </data>
  <data name="DeleteMediaButton" xml:space="preserve">
    <value>Delete media</value>
  </data>
  <data name="SetOrDeleteMedia" xml:space="preserve">
    <value>Set new media or press button to delete existing</value>
  </data>
  <data name="SetMedia" xml:space="preserve">
    <value>Send video (duration &lt; 60 s) or photo (.jpg or .png)</value>
  </data>
  <data name="DocumentNotSupported" xml:space="preserve">
    <value>Documents not supported</value>
  </data>
  <data name="DeleteLinkButton" xml:space="preserve">
    <value>Delete link</value>
  </data>
  <data name="SetOrDeleteLink" xml:space="preserve">
    <value>Set new link or press button to delete existing</value>
  </data>
  <data name="SetLink" xml:space="preserve">
    <value>Send link</value>
  </data>
  <data name="InvalidLink" xml:space="preserve">
    <value>Link is invalid, try again</value>
  </data>
  <data name="ItemDeleted" xml:space="preserve">
    <value>Item deleted</value>
  </data>
  <data name="UsersListsMessage" xml:space="preserve">
    <value>{0}'s public lists:</value>
  </data>
  <data name="NoPublicLists" xml:space="preserve">
    <value>{0} has no public lists</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="UserListIsEmpty" xml:space="preserve">
    <value>{0}, {1}'s list {2} is empty</value>
  </data>
  <data name="WantToPresentButton" xml:space="preserve">
    <value>I want to present</value>
  </data>
  <data name="SetFreeButton" xml:space="preserve">
    <value>Set free</value>
  </data>
  <data name="SetInProcessButton" xml:space="preserve">
    <value>In process</value>
  </data>
  <data name="SetDoneButton" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="InvalidMedia" xml:space="preserve">
    <value>Invalid media</value>
  </data>
  <data name="VideoTooLong" xml:space="preserve">
    <value>Video is too long</value>
  </data>
  <data name="PromiseToPresent" xml:space="preserve">
    <value>{0}, promise me, that you will present {1} {2}</value>
  </data>
  <data name="FreeItem" xml:space="preserve">
    <value>Nobody pressed to present this item, be first!</value>
  </data>
  <data name="InProcessItem" xml:space="preserve">
    <value>In process by @{0}</value>
  </data>
  <data name="DoneItem" xml:space="preserve">
    <value>Done by @{0}</value>
  </data>
  <data name="MaxListsCountReached" xml:space="preserve">
    <value>Max lists count reached. Max count = 20.</value>
  </data>
  <data name="MaxItemsCountReached" xml:space="preserve">
    <value>You reached max count of items in list (20).</value>
  </data>
  <data name="MadeFree" xml:space="preserve">
    <value>You made this wish available to others</value>
  </data>
  <data name="SettedInProcess" xml:space="preserve">
    <value>Prepare your present and press "Done" if it ready.</value>
  </data>
  <data name="SettedDone" xml:space="preserve">
    <value>Done!</value>
  </data>
  <data name="FeedbackMessage" xml:space="preserve">
    <value>Send your feedback! You can add anything you want in your message (photo, video, voice etc)</value>
  </data>
  <data name="FeedbackSent" xml:space="preserve">
    <value>Feedback sent!</value>
  </data>
  <data name="NoPresents" xml:space="preserve">
    <value>You have no presents in process</value>
  </data>
  <data name="PresentsFor" xml:space="preserve">
    <value>Presents for {0}</value>
  </data>
  <data name="CancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CantFindYourself" xml:space="preserve">
    <value>You can't watch at your wishes in such way</value>
  </data>
  <data name="Cancelled" xml:space="preserve">
    <value>Cancelled</value>
  </data>
</root>